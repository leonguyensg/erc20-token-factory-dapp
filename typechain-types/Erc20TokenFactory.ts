/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface Erc20TokenFactoryInterface extends Interface {
  getFunction(nameOrSignature: "allTokens" | "createToken"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TokenCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "allTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [
      AddressLike,
      string,
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      boolean
    ]
  ): string;

  decodeFunctionResult(functionFragment: "allTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
}

export namespace TokenCreatedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    owner: AddressLike,
    name: string,
    symbol: string,
    decimals: BigNumberish,
    initialSupply: BigNumberish
  ];
  export type OutputTuple = [
    tokenAddress: string,
    owner: string,
    name: string,
    symbol: string,
    decimals: bigint,
    initialSupply: bigint
  ];
  export interface OutputObject {
    tokenAddress: string;
    owner: string;
    name: string;
    symbol: string;
    decimals: bigint;
    initialSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Erc20TokenFactory extends BaseContract {
  connect(runner?: ContractRunner | null): Erc20TokenFactory;
  waitForDeployment(): Promise<this>;

  interface: Erc20TokenFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createToken: TypedContractMethod<
    [
      owner: AddressLike,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      initialSupply: BigNumberish,
      isMintable: boolean,
      isBurnable: boolean
    ],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createToken"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      initialSupply: BigNumberish,
      isMintable: boolean,
      isBurnable: boolean
    ],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "TokenCreated"
  ): TypedContractEvent<
    TokenCreatedEvent.InputTuple,
    TokenCreatedEvent.OutputTuple,
    TokenCreatedEvent.OutputObject
  >;

  filters: {
    "TokenCreated(address,address,string,string,uint8,uint256)": TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;
    TokenCreated: TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;
  };
}
